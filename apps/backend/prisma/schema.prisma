generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismabox {
  provider                    = "prismabox"
  typeboxImportDependencyName = "elysia"
  typeboxImportVariableName   = "t"
  inputModel                  = true
  output                      = "../src/generated/prismabox"
}

model User {
  id             String           @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  CharacterSheet CharacterSheet[]

  @@unique([email])
  @@map("user")
}

model CharacterSheet {
  id            Int      @id @default(autoincrement())
  owner         User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  str           Int
  agi           Int
  int           Int
  vig           Int
  pre           Int
  class         String
  background    String
  nex           Int
  level         Int
  turnPe        Int
  movement      Int
  currentHp     Int
  maxHp         Int
  currentSan    Int
  maxSan        Int
  currentPe     Int
  maxPe         Int
  currentPd     Int
  maxPd         Int
  equipDef      Int
  otherDef      Int
  blockDr       Int
  dodge         Int
  armor         String
  resistances   String
  proficiencies String
  skills        Json
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
